{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  //quickstart-a2f667fa.myshopify.com/cdn/shop/files/all_medium.webp?v=1746350113
  files/all.webp

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

{% assign default_variant = product.selected_or_first_available_variant %}
{% assign slected_variant = blank %}

<style>
  .thumbnail-slider .swiper-slide {
    width: fit-content;
    height: fit-content;
    opacity: 0.7;
    transition: opacity 0.3s;
  }

  .thumbnail-slider .swiper-slide:hover {
    opacity: 1;
    cursor: pointer;
  }
  .swiper-button-prev,
  .swiper-button-next {
    color: black;
    top: 50% !important;
    height: 20px;
  }
  .swiper-button-prev::after,
  .swiper-button-next::after {
    font-size: 20px;
  }
  .swiper-pagination {
    color: black;
    bottom: 0 !important;
  }
  .swiper-pagination-bullet-active {
    background: black !important;
  }
  .product--information {
    height: fit-content;
  }
</style>

<div x-data="{ productModalOpen: false }">
  <div class="max-w-6xl mx-auto">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
      <div class="product--medias">
        <div class="hidden md:block">
          {% assign first_media = product.media | first %}
          <div id="main-product-image" class="h-100 overflow-hidden p-2">
            {% render 'product-media', media: first_media %}
          </div>
        </div>
        <div class="thumbnail-slider hidden md:block">
          <div class="swiper thumbnails-swiper">
            <div class="swiper-wrapper">
              {% for media in product.media offset: 1 %}
                <div class="swiper-slide">
                  <div class="thumbnail-container h-[180px] w-[180px] shadow-md border">
                    {% render 'product-media', media: media %}
                  </div>
                </div>
              {% endfor %}
            </div>
            <div class="swiper-button-prev"></div>
            <div class="swiper-button-next"></div>
          </div>
        </div>

        <div class="md:hidden">
          <div class="swiper">
            <div class="swiper-wrapper">
              {% for media in product.media %}
                <div class="swiper-slide">
                  <div class="h-[100vw] overflow-hidden p-2">
                    {% render 'product-media', media: media %}
                  </div>
                </div>
              {% endfor %}
            </div>

            <div class="swiper-pagination"></div>

            <div class="swiper-button-prev"></div>
            <div class="swiper-button-next"></div>
          </div>
        </div>
      </div>

      <div class="product--information sticky top-5 p-2">
        {% form 'product', product, id: 'product-form', novalidate: 'novalidate' %}
          <input type="hidden" name="id" value="{{ default_variant.id }}">

          {% for block in section.blocks %}
            {% case block.type %}
              {% when 'vendor' %}
                <div class="my-3">
                  <span class="text-xs text-gray-500">{{ product.vendor }}</span>
                </div>
              {% when 'title' %}
                <div class="my-3">
                  <h1 class="text-3xl text-gray-900">{{ product.title }}</h1>
                </div>
              {% when 'price' %}
                <div class="my-3" id="price-{{ section.id }}">
                  <span class="text-base text-gray-500 line-through">
                    {{- default_variant.compare_at_price | money -}}
                  </span>
                  <span class="text-lg text-gray-900">{{ default_variant.price | money }}</span>

                  {% if default_variant.price < default_variant.compare_at_price %}
                    <span class="px-5 py-1 text-sm font-bold bg-red-500 rounded-full text-white mx-4">Sale</span>
                  {% endif %}
                </div>
              {% when 'variant_selector' %}
                <div class="my-3">
                  {% unless product.has_only_default_variant %}
                    <variant-selector data-url="{{ product.url }}" data-section="{{ section.id }}">
                      {% for option in product.options_with_values %}
                        {% assign optionIndex = forloop.index0 %}
                        {% assign option_name_downcase = option.name | downcase %}

                        <label class="block mb-2 font-bold" for="Option-{{ section.id }}-{{ optionIndex }}">
                          {{ option.name }}
                        </label>

                        {% if option_name_downcase contains 'color'
                          or option_name_downcase contains 'colour'
                          or option_name_downcase contains 'اللون'
                        %}
                          <div class="flex gap-2 my-2 items-center">
                            {% for value in option.values %}
                              <button
                                type="button"
                                onclick="setSelectVariant(value.id)"
                                class="w-8 h-8 rounded-full border border-gray-300 cursor-pointer color-swatch"
                                style="background-color: {{ value.swatch.color | escape }};"
                                data-value="{{ value | escape }}"
                                data-option-index="{{ optionIndex }}"
                                aria-label="{{ option.name }}: {{ value }}"
                              ></button>
                            {% endfor %}
                          </div>
                          
                          <select
                            name="options[{{ option.name | escape }}]"
                            id="Option-{{ section.id }}-{{ optionIndex }}"
                            class="sr-only"
                          >
                            {% for value in option.values %}
                              <option
                                value="{{ value | escape }}"
                                {% if option.selected_value == value %}
                                  selected
                                {% endif %}
                              >
                                {{ value }}
                              </option>
                            {% endfor %}
                          </select>

                        {% else %}
                          <div class="my-2">
                            <select
                              name="options[{{ option.name | escape }}]"
                              id="Option-{{ section.id }}-{{ optionIndex }}"
                              class="w-full border py-3 px-3"
                            >
                              {% for value in option.values %}
                                <option
                                  value="{{ value | escape }}"
                                  {% if option.selected_value == value %}
                                    selected
                                  {% endif %}
                                >
                                  {{ value }}
                                </option>
                              {% endfor %}
                            </select>
                          </div>
                        {% endif %}
                      {% endfor %}

                      <script type="application/json">
                        {{ product.variants | json }}
                      </script>
                    </variant-selector>
                  {% endunless %}
                </div>

              {% when 'quantity' %}
                <div class="my-3">
                  <label for="Quantity-{{ section.id }}">Quantity</label>

                  <div class="my-2">
                    <input
                      type="number"
                      name="quantity"
                      id="Quantity-{{ section.id }}"
                      value="1"
                      min="1"
                      class="w-full border px-3 py-3"
                    >
                  </div>
                </div>
              {% when 'description' %}
                <div class="my-3">
                  <p class="text-gray-700">{{ product.description }}</p>
                </div>

              {% when 'checkout_buttons' %}
                <div class="my-3">
                  <button
                    type="submit"
                    name="add"
                    class="w-full px-6 py-4 bg-gray-900 text-white hover:bg-gray-700 rounded-sm my-2"
                    {% if default_variant.available == false %}
                      disabled
                    {% endif %}
                  >
                    {% if default_variant.available == false %}
                      Sold out
                    {% else %}
                      Add to cart
                    {% endif %}
                  </button>
                </div>
              {% else %}

            {% endcase %}
          {% endfor %}
        {% endform %}
      </div>
    </div>
  </div>

  <style>
    .media model-viewer,
    .media > * {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  </style>

  <div id="productModelModal">
    <div x-show="productModalOpen" class="w-full h-full z-50 items-center fixed inset-0">
      <div class="relative w-full h-full bg-white">
        <div class="relative">
          <div class="flex justify-between items-start p-5 border-b">
            <h2 class="text-xl font-bold text-gray-700">3D Model Preview</h2>
            <button
              x-on:click="productModalOpen = false"
              class="text-gray-400 bg-transparent hover:text-gray-700 rounded text-sm p-2 ml-auto inline-flex items-center"
            >
              {% render 'icon-close' %}
            </button>
          </div>

          <div id="body" class="media block relative" style="padding-top: min(calc(100vh - 5rem), 100%);"></div>
        </div>
      </div>
    </div>
  </div>
</div>
<script src="{{ 'product-model.js' | asset_url }}" defer></script>

{% comment %} سكربت تحديد الفارينت التي سترسل إلى السلة {% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('product-form');
    if (!form) return;

    // نجيب بيانات الفارينتس من سكريبت JSON داخل الفورم
    const variantsDataScript = form.querySelector('variant-selector script[type="application/json"]');
    if (!variantsDataScript) return;
    const variants = JSON.parse(variantsDataScript.textContent);

    // جميع select خيارات الفارينت
    const optionSelectors = form.querySelectorAll('select[name^="options"]');
    const variantIdInput = form.querySelector('input[name="id"]');
    const priceContainer = document.getElementById('price-{{ section.id }}');
    const addToCartBtn = form.querySelector('button[name="add"]');

    function updateVariant() {
      const selectedOptions = Array.from(optionSelectors).map((select) => select.value);

      // نبحث الفارينت المطابق
      const matchedVariant = variants.find((variant) => variant.options.every((opt, i) => opt === selectedOptions[i]));

      if (matchedVariant) {
        // تحديث قيمة الـ hidden input
        variantIdInput.value = matchedVariant.id;

        // تحديث السعر في الصفحة
        if (priceContainer) {
          let comparePrice = matchedVariant.compare_at_price || 0;
          let price = matchedVariant.price;

          priceContainer.innerHTML = `
            ${
              comparePrice > price
                ? `<span class="text-base text-gray-500 line-through">${Shopify.formatMoney(comparePrice)}</span>`
                : ''
            }
            <span class="text-lg text-gray-900">${Shopify.formatMoney(price)}</span>
            ${
              comparePrice > price
                ? '<span class="px-5 py-1 text-sm font-bold bg-red-500 rounded-full text-white mx-4">Sale</span>'
                : ''
            }
          `;
        }

        // تحديث حالة زر الإضافة للسلة
        if (addToCartBtn) {
          if (!matchedVariant.available) {
            addToCartBtn.textContent = 'Sold out';
            addToCartBtn.disabled = true;
          } else {
            addToCartBtn.textContent = 'Add to cart';
            addToCartBtn.disabled = false;
          }
        }
      }
    }

    // حدث عند تغيير أي خيار
    optionSelectors.forEach((select) => select.addEventListener('change', updateVariant));

    // استدعاء تحديث تلقائي عند تحميل الصفحة
    updateVariant();
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    try {
      const swiper = new Swiper('.swiper', {
        direction: 'horizontal',

        pagination: {
          el: '.swiper-pagination',
        },

        navigation: {
          prevEl: '.swiper-button-prev',
          nextEl: '.swiper-button-next',
        },
      });
    } catch (e) {
      console.log('SwiperJS is not defined');
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var swiper = new Swiper('.thumbnails-swiper', {
      slidesPerView: 3,
      spaceBetween: 10,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      breakpoints: {
        768: {
          slidesPerView: 3,
          spaceBetween: 15,
        },
      },
    });
  });
</script>

<script>
  function setSelectVariant(value){
    console.log(value)
  }
</script>

{% comment %} سكربت تحديد الفارينت التي سترسل إلى السلة {% endcomment %}
{% comment %}
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('product-form');
      if (!form) return;

      const variantsDataScript = form.querySelector('variant-selector script[type="application/json"]');
      if (!variantsDataScript) return;
      const variants = JSON.parse(variantsDataScript.textContent || '[]');

      // كل الـ selects (بما فيها الـ hidden للون)
      const optionSelectors = Array.from(form.querySelectorAll('select[name^="options"]'));
      const variantIdInput = form.querySelector('input[name="id"]');
      const priceContainer = document.getElementById('price-{{ section.id }}');
      const addToCartBtn = form.querySelector('button[name="add"]');

      function updateVariant() {
        const selectedOptions = optionSelectors.map((s) => s.value);
        // debug: لو ما اشتغل شغّل السطر التالي في الكونسول
        // console.log('selectedOptions', selectedOptions);

        const matchedVariant = variants.find((v) => {
          // كل var.options يجب أن يطابق selectedOptions بالترتيب
          return v.options.every((opt, i) => opt === selectedOptions[i]);
        });

        if (matchedVariant) {
          variantIdInput.value = matchedVariant.id;

          // تحديث السعر
          if (priceContainer) {
            let comparePrice = matchedVariant.compare_at_price || 0;
            let price = matchedVariant.price;

            priceContainer.innerHTML = `
            ${
              comparePrice > price
                ? `<span class="text-base text-gray-500 line-through">${Shopify.formatMoney(comparePrice)}</span>`
                : ''
            }
            <span class="text-lg text-gray-900">${Shopify.formatMoney(price)}</span>
            ${
              comparePrice > price
                ? '<span class="px-5 py-1 text-sm font-bold bg-red-500 rounded-full text-white mx-4">Sale</span>'
                : ''
            }
          `;
          }

          // تحديث زر الإضافة
          if (addToCartBtn) {
            if (!matchedVariant.available) {
              addToCartBtn.textContent = 'Sold out';
              addToCartBtn.disabled = true;
            } else {
              addToCartBtn.textContent = 'Add to cart';
              addToCartBtn.disabled = false;
            }
          }
        } else {
          // لو ما لاقى فارينت — اختياري: تفريغ الـ hidden id
          // variantIdInput.value = '';
        }
      }

      // ربط حدث التغيير على الـ selects
      optionSelectors.forEach((select) =>
        select.addEventListener('change', function () {
          updateVariant();
          syncSwatchesWithSelects();
        })
      );

      // تعامل مع النقر على دوائر اللون
      const swatches = Array.from(form.querySelectorAll('.color-swatch'));
      swatches.forEach((swatch) => {
        swatch.addEventListener('click', function () {
          const optionIndex = parseInt(this.getAttribute('data-option-index'), 10);
          const value = this.getAttribute('data-value');
          const select = optionSelectors[optionIndex];
          if (select) {
            select.value = value;
            // طَرح حدث تغيير حتى يلتقط الـ listeners
            select.dispatchEvent(new Event('change', { bubbles: true }));
          }
          syncSwatchesWithSelects();
        });
      });

      function syncSwatchesWithSelects() {
        swatches.forEach((swatch) => {
          const optionIndex = parseInt(swatch.getAttribute('data-option-index'), 10);
          const value = swatch.getAttribute('data-value');
          const select = optionSelectors[optionIndex];
          if (select && select.value === value) {
            swatch.classList.add('ring-2', 'ring-black');
          } else {
            swatch.classList.remove('ring-2', 'ring-black');
          }
        });
      }

      // initial sync
      updateVariant();
      syncSwatchesWithSelects();
    });
  </script>
{% endcomment %}

{% schema %}
{
  "name": "Product",
  "blocks": [
    {
      "type": "vendor",
      "name": "Vendor",
      "limit": 1
    },
    {
      "type": "title",
      "name": "Title",
      "limit": 1
    },
    {
      "type": "price",
      "name": "Price",
      "limit": 1
    },
    {
      "type": "variant_selector",
      "name": "Variant Selector",
      "limit": 1
    },
    {
      "type": "quantity",
      "name": "Quantity",
      "limit": 1
    },
    {
      "type": "description",
      "name": "Description",
      "limit": 1
    },
    {
      "type": "checkout_buttons",
      "name": "Checkout Buttons",
      "limit": 1
    }
  ]
}
{% endschema %}
