<div class="filters justify-between items-center flex md:block space-y-4">
  <!-- Filter Selected Tags (Active Filters) -->
  {% if collection.current_tags.size > 0 or collection.current_filters.size > 0 %}
    <div class="mb-4 flex flex-wrap gap-2">
      {% for tag in collection.current_tags %}
        <span class="px-3 py-1 rounded bg-gray-200 text-sm flex items-center gap-2">
          {{ tag }}
          <a
            href="{{ collection.url | remove: '?constraint=' | append: collection.current_tags | split: tag | join: '' }}"
            class="text-red-500 hover:underline"
            >×</a
          >
        </span>
      {% endfor %}
      <a href="{{ collection.url }}" class="text-sm text-indigo-600 hover:underline ml-2">Remove all</a>
    </div>
  {% endif %}

  <!-- Filter by Price Range -->
  <div class="bg-gray-100 text-sm">
    <button onclick="togglePriceSection(this)" class="w-full flex py-1 px-4 justify-between items-center">
      <span>Price</span>
      <div>
        <span class="icon-down block">{%- render 'icon-chevron-down' -%}</span>
        <span class="icon-up hidden">{%- render 'icon-chevron-up' -%}</span>
      </div>
    </button>
    <div
      id="price-section"
      x-data="priceFilter()"
      class="relative hidden items-center gap-x-3 border-t border-[#c42764] py-3 px-4"
    >
      <label class="block font-semibold">from</label>
      <input
        type="number"
        x-model="minPrice"
        placeholder="from"
        class="w-full px-3 py-2 border rounded"
        min="0"
        @keyup.enter="applyFilter"
      >

      <label class="block font-semibold">to</label>
      <input
        type="number"
        x-model="maxPrice"
        placeholder="to"
        class="w-full px-3 py-2 border rounded"
        min="0"
        @keyup.enter="applyFilter"
      >
    </div>
  </div>

  <!-- Filter by Color (Variants) -->

  <!-- Brand  Filter -->
  {% assign vendor_values = '' %}
  {% for product in collection.all_products %}
    {% unless vendor_values contains product.vendor %}
      {% assign vendor_values = vendor_values | append: product.vendor | append: ',' %}
    {% endunless %}
  {% endfor %}
  {% assign vendor_array = vendor_values | split: ',' | uniq | compact %}

  {% if vendor_array.size > 0 %}
    <div x-data="{ open: false }" class="relative text-sm">
      <button @click="open = !open" class="flex justify-between w-full px-4 py-1 bg-gray-100 rounded shadow-sm">
        Brand
        <svg
          :class="{ 'rotate-180': open }"
          class="w-4 h-4 transition-transform"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          viewBox="0 0 24 24"
        >
          <path d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <ul
        x-show="open"
        @click.away="open = false"
        class="absolute z-10 bg-white shadow rounded mt-1 w-full max-h-60 overflow-auto"
      >
        {% for value in vendor_array %}
          <li>
            <a
              href="#"
              onclick="
                event.preventDefault();
                let searchParams = new URLSearchParams(window.location.search);
                searchParams.set('filter.p.vendor', '{{ value  }}');

                if(!searchParams.has('sort_by')) {
                  searchParams.set('sort_by', '{{ collection.sort_by | default: 'manual' }}');
                }
                window.location.href = window.location.pathname + '?' + searchParams.toString();
              "
              class="block px-4 py-2 hover:bg-indigo-100"
            >
              {{ value }}
            </a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}

  {% comment %} Availability Filter {% endcomment %}
  {% assign availability_values = '' %}
  {% for product in collection.all_products %}
    {% if product.available %}
      {% assign val = 'In Stock' %}
    {% else %}
      {% assign val = 'Out of Stock' %}
    {% endif %}
    {% unless availability_values contains val %}
      {% assign availability_values = availability_values | append: val | append: ',' %}
    {% endunless %}
  {% endfor %}
  {% assign availability_array = availability_values | split: ',' | uniq | compact %}

  {% if availability_array.size > 0 %}
    {% assign availability_array = '1,0' | split: ',' %}

    <div x-data="{ open: false }" class="relative text-sm">
      <button @click="open = !open" class="flex justify-between w-full px-4 py-1 bg-gray-100 rounded shadow-sm">
        Availability
        <svg
          :class="{ 'rotate-180': open }"
          class="w-4 h-4 transition-transform"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          viewBox="0 0 24 24"
        >
          <path d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <ul
        x-show="open"
        @click.away="open = false"
        class="absolute z-10 bg-white shadow rounded mt-1 w-full max-h-60 overflow-auto"
      >
        {% for value in availability_array %}
          {% if value == '1' %}
            {% assign label = 'In Stock' %}
          {% else %}
            {% assign label = 'Out of Stock' %}
          {% endif %}
          <li>
            <a
              href="#"
              onclick="
                event.preventDefault();
                let searchParams = new URLSearchParams(window.location.search);
                searchParams.set('filter.v.availability', '{{ value }}');
                if (!searchParams.has('sort_by')) {
                  searchParams.set('sort_by', '{{ collection.sort_by | default: 'manual' }}');
                }
                window.location.href = window.location.pathname + '?' + searchParams.toString();
              "
              class="block px-4 py-2 hover:bg-indigo-100"
            >
              {{ label }}
            </a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}

  {% comment %} Category Filter {% endcomment %}
  {% assign category_values = '' %}
  {% for product in collection.all_products %}
    {% for tag in product.tags %}
      {% unless category_values contains tag %}
        {% assign category_values = category_values | append: tag | append: ',' %}
      {% endunless %}
    {% endfor %}
  {% endfor %}
  {% assign category_array = category_values | split: ',' | uniq | compact %}

  {% if category_array.size > 0 %}
    <div x-data="{ open: false }" class="relative text-sm">
      <button @click="open = !open" class="flex justify-between w-full px-4 py-1 bg-gray-100 rounded shadow-sm">
        Category
        <svg
          :class="{ 'rotate-180': open }"
          class="w-4 h-4 transition-transform"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          viewBox="0 0 24 24"
        >
          <path d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <ul
        x-show="open"
        @click.away="open = false"
        class="absolute z-10 bg-white shadow rounded mt-1 w-full max-h-60 overflow-auto"
      >
        {% for value in category_array %}
          <li>
            <a
              href="#"
              onclick="
                event.preventDefault();
                let searchParams = new URLSearchParams(window.location.search);
                let tagValue = '{{ value | capitalize }}';
                searchParams.set('filter.p.tag', tagValue);
                if (!searchParams.has('sort_by')) {
                  searchParams.set('sort_by', '{{ collection.sort_by | default: 'manual' }}');
                }
                window.location.href = window.location.pathname + '?' + searchParams.toString();
              "
              class="block px-4 py-2 hover:bg-indigo-100"
            >
              {{ value }}
            </a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}


  {% if type_array.size > 0 %}
    <div x-data="{ open: false }" class="relative text-sm">
      <button @click="open = !open" class="flex justify-between w-full px-4 py-1 bg-gray-100 rounded shadow-sm">
        Product type
        <svg
          :class="{ 'rotate-180': open }"
          class="w-4 h-4 transition-transform"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          viewBox="0 0 24 24"
        >
          <path d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <ul
        x-show="open"
        @click.away="open = false"
        class="absolute z-10 bg-white shadow rounded mt-1 w-full max-h-60 overflow-auto"
      >
        {% for value in type_array %}
          <li>
            <a
              href="#"
              onclick="
                event.preventDefault();
                let searchParams = new URLSearchParams(window.location.search);
                searchParams.set('filter.v.product_type', '{{ value | handle }}');
                if (!searchParams.has('sort_by')) {
                  searchParams.set('sort_by', '{{ collection.sort_by | default: 'manual' }}');
                }
                window.location.href = window.location.pathname + '?' + searchParams.toString();
              "
              class="block px-4 py-2 hover:bg-indigo-100"
            >
              {{ value }}
            </a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}

  <!-- Filter by Options -->
  {% for option in collection.all_types_options %}
    <div x-data="{ open: false }" class="relative text-sm">
      <button @click="open = !open" class="flex justify-between w-full px-4 py-2 bg-gray-100 rounded shadow-sm">
        {{ option.name }}
        <svg
          :class="{ 'rotate-180': open }"
          class="w-4 h-4 transition-transform"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          viewBox="0 0 24 24"
        >
          <path d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <ul
        x-show="open"
        @click.away="open = false"
        class="absolute z-10 bg-white shadow rounded mt-1 w-full max-h-60 overflow-auto"
      >
        {% for value in option.values %}
          <li>
            <a
              href="{{ collection.url }}?options[{{ option.name | handle }}]={{ value | handle }}"
              class="block px-4 py-2 hover:bg-indigo-100"
            >
              {{ value }}
            </a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% endfor %}
</div>

<script>
  function togglePriceSection(button) {
    const iconDown = button.querySelector('.icon-down');
    const iconUp = button.querySelector('.icon-up');
    const priceSection = document.getElementById('price-section');

    // تبديل الأيقونات
    iconDown.classList.toggle('hidden');
    iconUp.classList.toggle('hidden');

    // تبديل ظهور الـ div بين hidden و flex
    if (priceSection.classList.contains('hidden')) {
      priceSection.classList.remove('hidden');
      priceSection.classList.add('flex');
    } else {
      priceSection.classList.remove('flex');
      priceSection.classList.add('hidden');
    }
  }
</script>

<script>
  function priceFilter() {
    return {
      minPrice: '',
      maxPrice: '',
      applyFilter() {
        // نحتفظ بكل الفلاتر الموجودة في URL
        let searchParams = new URLSearchParams(window.location.search);

        // تحديث أو حذف فلتر السعر الأدنى
        if (this.minPrice) {
          searchParams.set('filter.v.price.gte', this.minPrice);
        } else {
          searchParams.delete('filter.v.price.gte');
        }

        // تحديث أو حذف فلتر السعر الأعلى
        if (this.maxPrice) {
          searchParams.set('filter.v.price.lte', this.maxPrice);
        } else {
          searchParams.delete('filter.v.price.lte');
        }

        // الاحتفاظ بالسورت أو إضافة القيمة الافتراضية
        if (!searchParams.has('sort_by')) {
          searchParams.set('sort_by', '{{ collection.sort_by | default: 'manual' }}');
        }

        // تحويل كل الفلاتر إلى URL والانتقال للرابط
        window.location.href = window.location.pathname + '?' + searchParams.toString();
      },
    };
  }
</script>
